#pragma once
#include <string> 
using namespace std;
class Encode
{
public:
	Encode(const int key) :Key(key) {}
	string Encrypt(const string Text);
	string Decrypt(const string Text);
private:
	int max = 26;
	string text;
	int Key;
	void Encrypt_Error(const string Text);
	void Decrypt_Error(const string Text);
	string Deleted(string Text);
	string Up(string text);
};




#include <iostream> 
#include "Header.h" 
#include <stdexcept> 
#include <ctype.h> 
#include <string> 
using namespace std;
int main()
{
	setlocale(0, "rus");
	string k, input;
	unsigned int key;
	int i = 0, l = 0, max = 26;
	char answer = '1';
	cout << "Введите ключ." << endl;
	cin >> key;
	try
	{
		if ((key > max) | (key <= 0))
			throw 1;
		while (answer != '0')
		{
			cout << "Введите текст" << endl;
			cin.ignore();
			getline(cin, k);
			cout << "Зашифровать или расшифровать текст?" << endl;
			cout << "Зашифровать - 1. Расшифровать - 2. Выход - 0." << endl;
			cin >> answer;
			if (answer == '1')
			{
				Encode x(key);
				input = x.Encrypt(k);
			}
			
else if (answer == '2')
			{
				Encode x(key);
				input = x.Decrypt(k);
			}
			else if (answer == '0')
			{
			}
			else
				throw 5;
			if (answer != '0')
				cout << input << endl;
		}
	}
	catch (int error)
	{
		if (error == 1)
		{
			cerr << "Ошибка ввода ключа." << endl;
			return 1;
		}
		else
			if (error == 2)
			{
				cerr << "Ошибка ввода текста. Не удается ввести числа." << endl;
				return 2;
			}

			else
				if (error == 3)
				{
					cerr << "Ошибка ввода текста. Нельзя вводить неанглийские символы." << endl;
					return 3;
				}
				else
					if (error == 4)
					{
						cerr << "Ошибка ввода текста." << endl;
						return 4;
					}
		{
			cerr << "Ответ на вопрос неверный." << endl;
			return 5;
		}
	}
	return 0;
}






#include <ctype.h> 
#include <string> 
#include "Header.h" 
#include <iostream> 
using namespace std;


string Encode::Encrypt(const string Text)
{
	Encrypt_Error(Text);
	int i = 0;
	text = Deleted(Text);
	text = Up(text);
	while (text[i] != '\0')
	{
		if (text[i] + Key>'Z')
			text[i] = text[i] - (max - Key);
		else
			text[i] = text[i] + Key;
		i++;
	}
	return string(text);
}
string Encode::Decrypt(const string Text)
{
	Decrypt_Error(Text);
	int i = 0;
	text = Text;
	while (text[i] != '\0')
	{
		if ((text[i] - Key)<'A')
			text[i] = text[i] + (max - Key);
		else
			text[i] = text[i] - Key;
		i++;
	}
	return string(text);
}

void Encode::Encrypt_Error(string Text)
{
	int i = 0;
	while (Text[i] != '\0')
	{
		if ((Text[i] >= '0') && (Text[i] <= '9'))
			throw 2;
		i++;
	}
	i = 0;
	while (Text[i] != '\0')
	{
		5
if (((Text[i] >= 'А') && (Text[i] <= 'я')) | (Text[i] <= 'Ё') | (Text[i] <= 'ё'))
			throw 3;
		i++;
	}
}

void Encode::Decrypt_Error(const string Text)
{
	int i = 0;
	while (Text[i] != '\0')
	{
		if ((Text[i] >= 'A') && (Text[i] <= 'Z'))
		{
		}
		else
			throw 4;
		i++;
	}
}

string Encode::Deleted(string Text)
{
	int i = 0;
	text = Text;
	while (text[i] != '\0')
	{
		if (((text[i] >= 'A') && (text[i] <= 'Z')) | ((text[i] >= 'a') && (text[i] <= 'z')))
		{
			i++;
		}
		else
		{
			text.erase(i, 1);
		}
	}
	return string(text);
}

string Encode::Up(string text)
{
	int i = 0;
	while (text[i] != '\0')
	{
		text[i] = toupper(text[i]);
		i++;
	}
	return string(text);
  }